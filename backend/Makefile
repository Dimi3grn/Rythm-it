# Makefile pour Rythmit Backend

# Variables
BINARY_NAME=rythmit
MAIN_PATH=cmd/server/main.go
DB_NAME=rythmit_db

# Couleurs pour output
GREEN=\033[0;32m
RED=\033[0;31m
NC=\033[0m # No Color

.PHONY: help
help: ## Affiche cette aide
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: run
run: ## Lance le serveur
	@echo "$(GREEN)üöÄ D√©marrage du serveur Rythmit...$(NC)"
	go run $(MAIN_PATH)

.PHONY: dev
dev: ## Lance le serveur avec hot reload (n√©cessite air)
	@echo "$(GREEN)üîÑ D√©marrage en mode d√©veloppement avec hot reload...$(NC)"
	air

.PHONY: build
build: ## Compile l'application
	@echo "$(GREEN)üî® Compilation de Rythmit...$(NC)"
	go build -o bin/$(BINARY_NAME) $(MAIN_PATH)
	@echo "$(GREEN)‚úÖ Binaire cr√©√©: bin/$(BINARY_NAME)$(NC)"

.PHONY: test
test: ## Lance les tests
	@echo "$(GREEN)üß™ Lancement des tests...$(NC)"
	go test -v ./...

.PHONY: test-cover
test-cover: ## Lance les tests avec couverture
	@echo "$(GREEN)üìä Tests avec couverture...$(NC)"
	go test -v -cover ./...

.PHONY: lint
lint: ## Lance le linter
	@echo "$(GREEN)üîç Analyse du code...$(NC)"
	golangci-lint run

.PHONY: fmt
fmt: ## Formate le code
	@echo "$(GREEN)‚ú® Formatage du code...$(NC)"
	go fmt ./...

.PHONY: tidy
tidy: ## Nettoie les d√©pendances
	@echo "$(GREEN)üßπ Nettoyage des d√©pendances...$(NC)"
	go mod tidy

.PHONY: deps
deps: ## Installe les d√©pendances
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	go mod download

.PHONY: db-test
db-test: ## Teste la connexion DB
	@echo "$(GREEN)üóÑÔ∏è  Test de connexion MySQL...$(NC)"
	go run cmd/test_db/main.go

.PHONY: db-reset
db-reset: ## Reset la base de donn√©es (ATTENTION: efface tout!)
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: Cette commande va effacer toute la base de donn√©es!$(NC)"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		mysql -u root -e "DROP DATABASE IF EXISTS $(DB_NAME); CREATE DATABASE $(DB_NAME);" && \
		mysql -u root $(DB_NAME) < migrations/001_initial_schema.sql && \
		echo "$(GREEN)‚úÖ Base de donn√©es r√©initialis√©e$(NC)"; \
	fi

.PHONY: migrate
migrate: ## Applique les migrations
	@echo "$(GREEN)üîÑ Application des migrations...$(NC)"
	mysql -u root $(DB_NAME) < migrations/001_initial_schema.sql
	@echo "$(GREEN)‚úÖ Migrations appliqu√©es$(NC)"

.PHONY: install-tools
install-tools: ## Installe les outils de d√©veloppement
	@echo "$(GREEN)üõ†Ô∏è  Installation des outils de d√©veloppement...$(NC)"
	go install github.com/cosmtrek/air@latest
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@echo "$(GREEN)‚úÖ Outils install√©s$(NC)"

.PHONY: clean
clean: ## Nettoie les fichiers g√©n√©r√©s
	@echo "$(GREEN)üßπ Nettoyage...$(NC)"
	rm -rf bin/
	rm -rf tmp/
	go clean

.PHONY: all
all: clean deps fmt lint test build ## Lance tout

# Commandes Docker (pour plus tard)
.PHONY: docker-build
docker-build: ## Construit l'image Docker
	@echo "$(GREEN)üê≥ Construction de l'image Docker...$(NC)"
	docker build -t rythmit-backend .

.PHONY: docker-run
docker-run: ## Lance le conteneur Docker
	@echo "$(GREEN)üê≥ Lancement du conteneur...$(NC)"
	docker run -p 8085:8085 --env-file .env rythmit-backend